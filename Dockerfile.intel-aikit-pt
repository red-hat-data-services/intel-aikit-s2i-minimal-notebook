# This image provides a Python 3.7 environment you can use to run your Python
# applications.

ARG IMAGE_NAME=registry.access.redhat.com/ubi8/s2i-base
ARG IMAGE_TAG=latest

FROM ${IMAGE_NAME}:${IMAGE_TAG}

USER root

EXPOSE 8080

### add licenses to this directory
COPY licenses /licenses

# TODO(Spryor): ensure these are right, add Anaconda versions
ENV PYTHON_VERSION=3.7 \
    PATH=$HOME/.local/bin/:$PATH \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING=UTF-8 \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    PIP_NO_CACHE_DIR=off \
    APP_ROOT=/opt/app-root \
    CONDA_ROOT=${APP_ROOT}/miniconda3 \
    CONDA_ENV_PT=intel-aikit-pytorch \
    PATH=${APP_ROOT}/miniconda3/bin:${PATH}

# Intel Optimizations specific Envs
ENV KMP_AFFINITY='granularity=fine,verbose,compact,1,0' \
    KMP_BLOCKTIME=1 \
    KMP_SETTINGS=1 \
    USE_DAAL4PY_SKLEARN='YES'

# RHEL7 base images automatically set these envvars to run scl_enable. RHEl8
# images, however, don't as most images don't need SCLs any more. But we want
# to run it even on RHEL8, because we set the virtualenv environment as part of
# that script
#ENV BASH_ENV=${APP_ROOT}/etc/scl_enable \
#    ENV=${APP_ROOT}/etc/scl_enable \
#    PROMPT_COMMAND=". ${APP_ROOT}/etc/scl_enable"

# Ensure we're enabling Anaconda by forcing the activation script in the shell
# ENV BASH_ENV="${CONDA_ROOT}/bin/activate ${CONDA_ENV_PT}" \
#     ENV="${CONDA_ROOT}/bin/activate ${CONDA_ENV_PT}" \
#     PROMPT_COMMAND=". ${CONDA_ROOT}/bin/activate ${CONDA_ENV_PT}"

### Required OpenShift Labels
LABEL name="Intel\u00ae AiKit PyTorch*" \
      maintainer="abolfazl.shahbazi@intel.com" \
      vendor="Intel Corporation" \
      version="v2021.2" \
      release="2021.2" \
      summary="Intel\u00ae PyTorch* and oneDNN on AiKit" \
      description="AiKit PyTorch* and Intel\u00ae oneAPI Deep Neural Network Library (oneDNN) optimized container for Intel\u00ae Xeon\u00ae processors." \
      io.k8s.display-name="Anaconda Python 3.7" \
      io.openshift.expose-services="8080:http" \
      io.openshift.tags="builder,python,python37,python-37,miniconda3,AiKit" \
      com.redhat.component="python-37-container" \
      usage=""

RUN yum -y update-minimal --security --sec-severity=Important --sec-severity=Critical

RUN yum -y module enable httpd:2.4 && \
    INSTALL_PKGS="atlas-devel \
    enchant \
    gcc-gfortran \
    git \
    httpd \
    httpd-devel \
    libffi-devel \
    libtool-ltdl \
    mod_auth_gssapi \
    mod_ldap \
    mod_session \
    mod_ssl \
    nss_wrapper \
    tar \
    unzip \
    wget \
    zip" && \
    yum -y --setopt=tsflags=nodocs install $INSTALL_PKGS && \
    rpm -V $INSTALL_PKGS && \
    yum -y clean all --enablerepo='*'

# TODO(Spryor): What extra files exactly...?
# Copy extra files to the image.
# COPY ./root/ /

# - Create a Python virtual environment for use by any application to avoid
#   potential conflicts with Python packages preinstalled in the main Python
#   installation.
# - In order to drop the root user, we have to make some directories world
#   writable as OpenShift default security model is to run the container
#   under random UID.

ARG CONDA_VERSION=py37_4.9.2
RUN curl https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh > Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh && \
    chmod +x Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh && \
    ./Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh -b -p ${CONDA_ROOT} && \
    rm ./Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh

RUN \
    conda create --yes -p ${CONDA_ROOT}/envs/${CONDA_ENV_PT} python=3.7 ${CONDA_ENV_PT} -c intel && \
    conda install --yes -p ${CONDA_ROOT}/envs/${CONDA_ENV_PT} ipython ipykernel kernda -c conda-forge && \
    conda install --yes -p ${CONDA_ROOT}/envs/${CONDA_ENV_PT} matplotlib && \
    chown -R 1001:0 ${APP_ROOT} && \
    fix-permissions ${APP_ROOT} -P && \
    fix-permissions ${CONDA_ROOT} -P && \
    rpm-file-permissions

COPY . /tmp/src

RUN rm -rf /tmp/src/.git* && \
    chown -R 1001 /tmp/src && \
    chgrp -R 0 /tmp/src && \
    chmod -R g+w /tmp/src && \
    rm -rf /tmp/scripts && \
    mv /tmp/src/.s2i/bin /tmp/scripts

RUN /tmp/scripts/assemble

RUN conda config --set auto_activate_base false

ARG KERNEL_NAME_PT="Intel AiKit PyTorch"
RUN \
    ${CONDA_ROOT}/envs/${CONDA_ENV_PT}/bin/python -m ipykernel install --name ${CONDA_ENV_PT} --display-name "${KERNEL_NAME_PT}" && \
    ${CONDA_ROOT}/envs/${CONDA_ENV_PT}/bin/kernda -o -y /usr/local/share/jupyter/kernels/${CONDA_ENV_PT}/kernel.json

RUN conda clean -y --all

USER 1001

ENV JUPYTER_PRELOAD_REPOS='https://github.com/IntelAI/models.git@master,https://github.com/IntelAI/oneAPI-samples.git@redhat-odh'

ENV JUPYTER_NOTEBOOK_INTERFACE=lab

CMD [ "/opt/app-root/builder/run" ]
